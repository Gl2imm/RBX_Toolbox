# coding: utf-8

"""
    assets-upload-api

    An autogenerated client for the assets-upload-api.  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class RobloxAssetsManagementAssetsUploadApiPreSignedUploadUrl(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'http_verb': 'str',
        'url': 'str',
        'expiration_time_ms': 'int',
        'chunk_num': 'int',
        'content_start': 'int',
        'content_length': 'int'
    }

    attribute_map = {
        'http_verb': 'httpVerb',
        'url': 'url',
        'expiration_time_ms': 'expirationTimeMs',
        'chunk_num': 'chunkNum',
        'content_start': 'contentStart',
        'content_length': 'contentLength'
    }

    def __init__(self, http_verb=None, url=None, expiration_time_ms=None, chunk_num=None, content_start=None, content_length=None, local_vars_configuration=None):  # noqa: E501
        """RobloxAssetsManagementAssetsUploadApiPreSignedUploadUrl - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._http_verb = None
        self._url = None
        self._expiration_time_ms = None
        self._chunk_num = None
        self._content_start = None
        self._content_length = None
        self.discriminator = None

        self.http_verb = http_verb
        self.url = url
        if expiration_time_ms is not None:
            self.expiration_time_ms = expiration_time_ms
        if chunk_num is not None:
            self.chunk_num = chunk_num
        if content_start is not None:
            self.content_start = content_start
        if content_length is not None:
            self.content_length = content_length

    @property
    def http_verb(self):
        """Gets the http_verb of this RobloxAssetsManagementAssetsUploadApiPreSignedUploadUrl.  # noqa: E501


        :return: The http_verb of this RobloxAssetsManagementAssetsUploadApiPreSignedUploadUrl.  # noqa: E501
        :rtype: str
        """
        return self._http_verb

    @http_verb.setter
    def http_verb(self, http_verb):
        """Sets the http_verb of this RobloxAssetsManagementAssetsUploadApiPreSignedUploadUrl.


        :param http_verb: The http_verb of this RobloxAssetsManagementAssetsUploadApiPreSignedUploadUrl.  # noqa: E501
        :type http_verb: str
        """

        self._http_verb = http_verb

    @property
    def url(self):
        """Gets the url of this RobloxAssetsManagementAssetsUploadApiPreSignedUploadUrl.  # noqa: E501


        :return: The url of this RobloxAssetsManagementAssetsUploadApiPreSignedUploadUrl.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this RobloxAssetsManagementAssetsUploadApiPreSignedUploadUrl.


        :param url: The url of this RobloxAssetsManagementAssetsUploadApiPreSignedUploadUrl.  # noqa: E501
        :type url: str
        """

        self._url = url

    @property
    def expiration_time_ms(self):
        """Gets the expiration_time_ms of this RobloxAssetsManagementAssetsUploadApiPreSignedUploadUrl.  # noqa: E501


        :return: The expiration_time_ms of this RobloxAssetsManagementAssetsUploadApiPreSignedUploadUrl.  # noqa: E501
        :rtype: int
        """
        return self._expiration_time_ms

    @expiration_time_ms.setter
    def expiration_time_ms(self, expiration_time_ms):
        """Sets the expiration_time_ms of this RobloxAssetsManagementAssetsUploadApiPreSignedUploadUrl.


        :param expiration_time_ms: The expiration_time_ms of this RobloxAssetsManagementAssetsUploadApiPreSignedUploadUrl.  # noqa: E501
        :type expiration_time_ms: int
        """

        self._expiration_time_ms = expiration_time_ms

    @property
    def chunk_num(self):
        """Gets the chunk_num of this RobloxAssetsManagementAssetsUploadApiPreSignedUploadUrl.  # noqa: E501


        :return: The chunk_num of this RobloxAssetsManagementAssetsUploadApiPreSignedUploadUrl.  # noqa: E501
        :rtype: int
        """
        return self._chunk_num

    @chunk_num.setter
    def chunk_num(self, chunk_num):
        """Sets the chunk_num of this RobloxAssetsManagementAssetsUploadApiPreSignedUploadUrl.


        :param chunk_num: The chunk_num of this RobloxAssetsManagementAssetsUploadApiPreSignedUploadUrl.  # noqa: E501
        :type chunk_num: int
        """

        self._chunk_num = chunk_num

    @property
    def content_start(self):
        """Gets the content_start of this RobloxAssetsManagementAssetsUploadApiPreSignedUploadUrl.  # noqa: E501


        :return: The content_start of this RobloxAssetsManagementAssetsUploadApiPreSignedUploadUrl.  # noqa: E501
        :rtype: int
        """
        return self._content_start

    @content_start.setter
    def content_start(self, content_start):
        """Sets the content_start of this RobloxAssetsManagementAssetsUploadApiPreSignedUploadUrl.


        :param content_start: The content_start of this RobloxAssetsManagementAssetsUploadApiPreSignedUploadUrl.  # noqa: E501
        :type content_start: int
        """

        self._content_start = content_start

    @property
    def content_length(self):
        """Gets the content_length of this RobloxAssetsManagementAssetsUploadApiPreSignedUploadUrl.  # noqa: E501


        :return: The content_length of this RobloxAssetsManagementAssetsUploadApiPreSignedUploadUrl.  # noqa: E501
        :rtype: int
        """
        return self._content_length

    @content_length.setter
    def content_length(self, content_length):
        """Sets the content_length of this RobloxAssetsManagementAssetsUploadApiPreSignedUploadUrl.


        :param content_length: The content_length of this RobloxAssetsManagementAssetsUploadApiPreSignedUploadUrl.  # noqa: E501
        :type content_length: int
        """

        self._content_length = content_length

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RobloxAssetsManagementAssetsUploadApiPreSignedUploadUrl):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RobloxAssetsManagementAssetsUploadApiPreSignedUploadUrl):
            return True

        return self.to_dict() != other.to_dict()
