# coding: utf-8

"""
    assets-upload-api

    An autogenerated client for the assets-upload-api.  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class AssetCreateRequestRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'path': 'str',
        'revision_id': 'str',
        'revision_create_time': 'GoogleProtobufWellKnownTypesTimestamp',
        'asset_id': 'int',
        'display_name': 'str',
        'description': 'str',
        'asset_type': 'RobloxOpenCloudAssetsV1AssetType',
        'creation_context': 'RobloxOpenCloudAssetsV1CreationContext',
        'moderation_result': 'RobloxOpenCloudAssetsV1ModerationResult'
    }

    attribute_map = {
        'path': 'path',
        'revision_id': 'revisionId',
        'revision_create_time': 'revisionCreateTime',
        'asset_id': 'assetId',
        'display_name': 'displayName',
        'description': 'description',
        'asset_type': 'assetType',
        'creation_context': 'creationContext',
        'moderation_result': 'moderationResult'
    }

    def __init__(self, path=None, revision_id=None, revision_create_time=None, asset_id=None, display_name=None, description=None, asset_type=None, creation_context=None, moderation_result=None, local_vars_configuration=None):  # noqa: E501
        """AssetCreateRequestRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._path = None
        self._revision_id = None
        self._revision_create_time = None
        self._asset_id = None
        self._display_name = None
        self._description = None
        self._asset_type = None
        self._creation_context = None
        self._moderation_result = None
        self.discriminator = None

        self.path = path
        self.revision_id = revision_id
        if revision_create_time is not None:
            self.revision_create_time = revision_create_time
        if asset_id is not None:
            self.asset_id = asset_id
        self.display_name = display_name
        self.description = description
        if asset_type is not None:
            self.asset_type = asset_type
        if creation_context is not None:
            self.creation_context = creation_context
        if moderation_result is not None:
            self.moderation_result = moderation_result

    @property
    def path(self):
        """Gets the path of this AssetCreateRequestRequest.  # noqa: E501


        :return: The path of this AssetCreateRequestRequest.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this AssetCreateRequestRequest.


        :param path: The path of this AssetCreateRequestRequest.  # noqa: E501
        :type path: str
        """

        self._path = path

    @property
    def revision_id(self):
        """Gets the revision_id of this AssetCreateRequestRequest.  # noqa: E501


        :return: The revision_id of this AssetCreateRequestRequest.  # noqa: E501
        :rtype: str
        """
        return self._revision_id

    @revision_id.setter
    def revision_id(self, revision_id):
        """Sets the revision_id of this AssetCreateRequestRequest.


        :param revision_id: The revision_id of this AssetCreateRequestRequest.  # noqa: E501
        :type revision_id: str
        """

        self._revision_id = revision_id

    @property
    def revision_create_time(self):
        """Gets the revision_create_time of this AssetCreateRequestRequest.  # noqa: E501


        :return: The revision_create_time of this AssetCreateRequestRequest.  # noqa: E501
        :rtype: GoogleProtobufWellKnownTypesTimestamp
        """
        return self._revision_create_time

    @revision_create_time.setter
    def revision_create_time(self, revision_create_time):
        """Sets the revision_create_time of this AssetCreateRequestRequest.


        :param revision_create_time: The revision_create_time of this AssetCreateRequestRequest.  # noqa: E501
        :type revision_create_time: GoogleProtobufWellKnownTypesTimestamp
        """

        self._revision_create_time = revision_create_time

    @property
    def asset_id(self):
        """Gets the asset_id of this AssetCreateRequestRequest.  # noqa: E501


        :return: The asset_id of this AssetCreateRequestRequest.  # noqa: E501
        :rtype: int
        """
        return self._asset_id

    @asset_id.setter
    def asset_id(self, asset_id):
        """Sets the asset_id of this AssetCreateRequestRequest.


        :param asset_id: The asset_id of this AssetCreateRequestRequest.  # noqa: E501
        :type asset_id: int
        """

        self._asset_id = asset_id

    @property
    def display_name(self):
        """Gets the display_name of this AssetCreateRequestRequest.  # noqa: E501


        :return: The display_name of this AssetCreateRequestRequest.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this AssetCreateRequestRequest.


        :param display_name: The display_name of this AssetCreateRequestRequest.  # noqa: E501
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def description(self):
        """Gets the description of this AssetCreateRequestRequest.  # noqa: E501


        :return: The description of this AssetCreateRequestRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AssetCreateRequestRequest.


        :param description: The description of this AssetCreateRequestRequest.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def asset_type(self):
        """Gets the asset_type of this AssetCreateRequestRequest.  # noqa: E501


        :return: The asset_type of this AssetCreateRequestRequest.  # noqa: E501
        :rtype: RobloxOpenCloudAssetsV1AssetType
        """
        return self._asset_type

    @asset_type.setter
    def asset_type(self, asset_type):
        """Sets the asset_type of this AssetCreateRequestRequest.


        :param asset_type: The asset_type of this AssetCreateRequestRequest.  # noqa: E501
        :type asset_type: RobloxOpenCloudAssetsV1AssetType
        """

        self._asset_type = asset_type

    @property
    def creation_context(self):
        """Gets the creation_context of this AssetCreateRequestRequest.  # noqa: E501


        :return: The creation_context of this AssetCreateRequestRequest.  # noqa: E501
        :rtype: RobloxOpenCloudAssetsV1CreationContext
        """
        return self._creation_context

    @creation_context.setter
    def creation_context(self, creation_context):
        """Sets the creation_context of this AssetCreateRequestRequest.


        :param creation_context: The creation_context of this AssetCreateRequestRequest.  # noqa: E501
        :type creation_context: RobloxOpenCloudAssetsV1CreationContext
        """

        self._creation_context = creation_context

    @property
    def moderation_result(self):
        """Gets the moderation_result of this AssetCreateRequestRequest.  # noqa: E501


        :return: The moderation_result of this AssetCreateRequestRequest.  # noqa: E501
        :rtype: RobloxOpenCloudAssetsV1ModerationResult
        """
        return self._moderation_result

    @moderation_result.setter
    def moderation_result(self, moderation_result):
        """Sets the moderation_result of this AssetCreateRequestRequest.


        :param moderation_result: The moderation_result of this AssetCreateRequestRequest.  # noqa: E501
        :type moderation_result: RobloxOpenCloudAssetsV1ModerationResult
        """

        self._moderation_result = moderation_result

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetCreateRequestRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AssetCreateRequestRequest):
            return True

        return self.to_dict() != other.to_dict()
