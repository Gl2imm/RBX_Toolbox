# coding: utf-8

"""
    assets-upload-api

    An autogenerated client for the assets-upload-api.  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class RobloxAssetsManagementAssetsUploadApiFile(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'content_type': 'str',
        'filesize': 'int',
        'md5_checksum': 'str',
        'chunk_plan': 'list[int]'
    }

    attribute_map = {
        'content_type': 'contentType',
        'filesize': 'filesize',
        'md5_checksum': 'md5Checksum',
        'chunk_plan': 'chunkPlan'
    }

    def __init__(self, content_type=None, filesize=None, md5_checksum=None, chunk_plan=None, local_vars_configuration=None):  # noqa: E501
        """RobloxAssetsManagementAssetsUploadApiFile - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._content_type = None
        self._filesize = None
        self._md5_checksum = None
        self._chunk_plan = None
        self.discriminator = None

        self.content_type = content_type
        if filesize is not None:
            self.filesize = filesize
        self.md5_checksum = md5_checksum
        self.chunk_plan = chunk_plan

    @property
    def content_type(self):
        """Gets the content_type of this RobloxAssetsManagementAssetsUploadApiFile.  # noqa: E501


        :return: The content_type of this RobloxAssetsManagementAssetsUploadApiFile.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this RobloxAssetsManagementAssetsUploadApiFile.


        :param content_type: The content_type of this RobloxAssetsManagementAssetsUploadApiFile.  # noqa: E501
        :type content_type: str
        """

        self._content_type = content_type

    @property
    def filesize(self):
        """Gets the filesize of this RobloxAssetsManagementAssetsUploadApiFile.  # noqa: E501


        :return: The filesize of this RobloxAssetsManagementAssetsUploadApiFile.  # noqa: E501
        :rtype: int
        """
        return self._filesize

    @filesize.setter
    def filesize(self, filesize):
        """Sets the filesize of this RobloxAssetsManagementAssetsUploadApiFile.


        :param filesize: The filesize of this RobloxAssetsManagementAssetsUploadApiFile.  # noqa: E501
        :type filesize: int
        """

        self._filesize = filesize

    @property
    def md5_checksum(self):
        """Gets the md5_checksum of this RobloxAssetsManagementAssetsUploadApiFile.  # noqa: E501


        :return: The md5_checksum of this RobloxAssetsManagementAssetsUploadApiFile.  # noqa: E501
        :rtype: str
        """
        return self._md5_checksum

    @md5_checksum.setter
    def md5_checksum(self, md5_checksum):
        """Sets the md5_checksum of this RobloxAssetsManagementAssetsUploadApiFile.


        :param md5_checksum: The md5_checksum of this RobloxAssetsManagementAssetsUploadApiFile.  # noqa: E501
        :type md5_checksum: str
        """

        self._md5_checksum = md5_checksum

    @property
    def chunk_plan(self):
        """Gets the chunk_plan of this RobloxAssetsManagementAssetsUploadApiFile.  # noqa: E501


        :return: The chunk_plan of this RobloxAssetsManagementAssetsUploadApiFile.  # noqa: E501
        :rtype: list[int]
        """
        return self._chunk_plan

    @chunk_plan.setter
    def chunk_plan(self, chunk_plan):
        """Sets the chunk_plan of this RobloxAssetsManagementAssetsUploadApiFile.


        :param chunk_plan: The chunk_plan of this RobloxAssetsManagementAssetsUploadApiFile.  # noqa: E501
        :type chunk_plan: list[int]
        """

        self._chunk_plan = chunk_plan

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RobloxAssetsManagementAssetsUploadApiFile):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RobloxAssetsManagementAssetsUploadApiFile):
            return True

        return self.to_dict() != other.to_dict()
