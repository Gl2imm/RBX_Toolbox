# coding: utf-8

"""
    assets-upload-api

    An autogenerated client for the assets-upload-api.  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class RobloxLongrunningOperation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'path': 'str',
        'metadata': 'GoogleProtobufWellKnownTypesAny',
        'done': 'bool',
        'error': 'GoogleRpcStatus',
        'response': 'RobloxOpenCloudAssetsV1Asset',
        'result_case': 'RobloxLongrunningOperationResultOneofCase'
    }

    attribute_map = {
        'path': 'path',
        'metadata': 'metadata',
        'done': 'done',
        'error': 'error',
        'response': 'response',
        'result_case': 'resultCase'
    }

    def __init__(self, path=None, metadata=None, done=None, error=None, response=None, result_case=None, local_vars_configuration=None):  # noqa: E501
        """RobloxLongrunningOperation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._path = None
        self._metadata = None
        self._done = None
        self._error = None
        self._response = None
        self._result_case = None
        self.discriminator = None

        self.path = path
        if metadata is not None:
            self.metadata = metadata
        if done is not None:
            self.done = done
        if error is not None:
            self.error = error
        if response is not None:
            self.response = response
        if result_case is not None:
            self.result_case = result_case

    @property
    def path(self):
        """Gets the path of this RobloxLongrunningOperation.  # noqa: E501


        :return: The path of this RobloxLongrunningOperation.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this RobloxLongrunningOperation.


        :param path: The path of this RobloxLongrunningOperation.  # noqa: E501
        :type path: str
        """

        self._path = path

    @property
    def metadata(self):
        """Gets the metadata of this RobloxLongrunningOperation.  # noqa: E501


        :return: The metadata of this RobloxLongrunningOperation.  # noqa: E501
        :rtype: GoogleProtobufWellKnownTypesAny
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this RobloxLongrunningOperation.


        :param metadata: The metadata of this RobloxLongrunningOperation.  # noqa: E501
        :type metadata: GoogleProtobufWellKnownTypesAny
        """

        self._metadata = metadata

    @property
    def done(self):
        """Gets the done of this RobloxLongrunningOperation.  # noqa: E501


        :return: The done of this RobloxLongrunningOperation.  # noqa: E501
        :rtype: bool
        """
        return self._done

    @done.setter
    def done(self, done):
        """Sets the done of this RobloxLongrunningOperation.


        :param done: The done of this RobloxLongrunningOperation.  # noqa: E501
        :type done: bool
        """

        self._done = done

    @property
    def error(self):
        """Gets the error of this RobloxLongrunningOperation.  # noqa: E501


        :return: The error of this RobloxLongrunningOperation.  # noqa: E501
        :rtype: GoogleRpcStatus
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this RobloxLongrunningOperation.


        :param error: The error of this RobloxLongrunningOperation.  # noqa: E501
        :type error: GoogleRpcStatus
        """

        self._error = error

    @property
    def response(self):
        """Gets the response of this RobloxOpenCloudAssetsV1Asset.  # noqa: E501


        :return: The response of this RobloxOpenCloudAssetsV1Asset.  # noqa: E501
        :rtype: RobloxOpenCloudAssetsV1Asset
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this RobloxOpenCloudAssetsV1Asset.


        :param response: The response of this RobloxOpenCloudAssetsV1Asset.  # noqa: E501
        :type response: RobloxOpenCloudAssetsV1Asset
        """

        self._response = response

    @property
    def result_case(self):
        """Gets the result_case of this RobloxLongrunningOperation.  # noqa: E501


        :return: The result_case of this RobloxLongrunningOperation.  # noqa: E501
        :rtype: RobloxLongrunningOperationResultOneofCase
        """
        return self._result_case

    @result_case.setter
    def result_case(self, result_case):
        """Sets the result_case of this RobloxLongrunningOperation.


        :param result_case: The result_case of this RobloxLongrunningOperation.  # noqa: E501
        :type result_case: RobloxLongrunningOperationResultOneofCase
        """

        self._result_case = result_case

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RobloxLongrunningOperation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RobloxLongrunningOperation):
            return True

        return self.to_dict() != other.to_dict()
